[instance_test_module]
module=test_module
test_method=test_array
test_output_instance=instance_buffer

[instance_buffer]
module=buffer
senders=instance_ip_6

# Note : All conditions in array tree must evaluate to TRUE

{input_array}
be4#be_four,
be3#be_3,
IF ({be_four} + 1 == (~~16777728 * 2) / 2 + 1 && {be_3} > 0)
	be2s#be_two_s,REWIND1,be2s#be_two_s
	IF ({be_two_s} < 9223372036854775807 && ({be_3} & ((0x200 << 1)>>1)) == 0x200)
		be1u#be_one_u,
		sep1#sep_one,
		IF ({sep_one} == 59)
			le4#le_four
			REWIND1
			le4#le_four
			;
		;
	le3#le_three,
	vain#youresovain,
	le2s#le_twos,
	vain,
	REWIND1,
	IF ({le_twos} < -10)
		le1u#le_oneu,
		sep2#sep_two
		;
	blob8@2#blob_eight,
	msg#msg,
	str#emptystr
	;
;

[instance_ip]
module=ip
ip_input_types={input_array}
ip_udp_port=2222

[instance_buffer_ip_output]
module=buffer
senders=instance_ip
duplicate=yes

[instance_drain]
module=raw
senders=instance_buffer_ip_output
raw_print_data=yes

# Send the full message using TCP
[instance_ip_3]
module=ip
senders=instance_buffer_ip_output
wait_for=instance_ip_4
ip_target_port=2224
ip_target_host=localhost
ip_target_protocol=tcp
ip_force_target=yes
ip_send_rrr_message=yes

# Receive the full message using TCP
[instance_ip_4]
module=ip
# Test inline array tree
ip_input_types=IF(1==1)msg;
ip_extract_rrr_messages=yes
ip_tcp_port=2224

# Pack the array from the message and send again with arbitary local port
[instance_ip_5]
module=ip
senders=instance_ip_4
wait_for=instance_ip_6
ip_force_target=yes
ip_target_port=2226
ip_target_host=localhost

# Receive and unpack the array into a new message
[instance_ip_6]
module=ip
ip_input_types=be8#be4,be8#be3,be8s#be2s,be8u#be1u,sep1#sep1,be8#le4,be8#le3,be8s#le2s,be8u#le1u,sep2#sep2,blob8@2#blob8,msg#msg,str#emptystr
ip_udp_port=2226
