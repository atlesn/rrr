.Dd 2021-01-14
.TH RRR_POST 1
.SH NAME
Read Route Record is a dynamic module-based message handling program
for collecting, buffering, processing and storing messages and measurements.
.PP
.B rrr_post
parses input from a file or standard input and connects to a UNIX socket created by the main
.B rrr
program to post data to its modules.
.SH SYNOPSIS
.B rrr_post {RRR SOCKET}
.Dl [-f|--file[=]FILENAME|-]
.Dl [-r|--readings[=]reading1,reading2,...]
.Dl [-a|--array-definition[=]ARRAY DEFINITION]
.Dl [-L|--log-delivery]
.Dl [-j|--json]
.Dl [-m|--max-message-size[=]BYTES]
.Dl [-c|--count[=]MAX FILE RECORDS]
.Dl [-t|--topic[=]MQTT TOPIC]
.Dl [-s|--sync]
.Dl [-q|--quiet]
.Dl [-l|--loglevel-translation]
.Dl [-e|--environment-file[=]ENVIRONMENT FILE]
.Dl [-d|--debuglevel[=]FLAGS]
.Dl [-D|--debuglevel-on-exit[=]FLAGS]
.Dl [-h|--help]
.Dl [-v|--version]

.SH DESCRIPTION
This program requires
.Xr rrr(1)
to be running and listening on a UNIX socket with its
.B socket
module. Refer to
.Xr rrr.conf(5)
and
.Xr rrr(1)
on how to set this up.
.B rrr_post
will parse input records in a chosen format and convert them to RRR array messages before sending them on the socket. An input data
record may contain an arbitary number of data fields of different types (strings, numbers etc.).
.PP
.SH OPTIONS
.IP -f|--file[=]FILENAME|-
Read records from a file or standard input (-). The format of the input data must be specified with the
.B -a
option. If left unspecified, no file or standard input reading is performed.
.IP -r|--readings[=]reading1,reading2,...
Generate simple RRR messages, one for each reading specified. The reading value is an unsigned integer stored as 64 bits. If specified, the
reading messages are generated before any reading of a file or standard input begins.
.IP -a|--array-definition[=]DEFINITION
Format of the input data for file or standard input, see the
.B ARRAY DEFINITION
section. If no array is specified, the array "msg" is used (input is RRR messages).
.IP -L|--log-delivery
If given, log messages are expected to be read  which are then delivered as native
RRR log messages to the specified socket.
A socket set up by the log daemon
.B rrr_logd(1)
may be used to receive these log messages.

A given array definition in
.B -a|--array-definition
must provide values with the following fields of which some are optional.

.Bl -tag -width -indent

.It log_level_translated
RFC 5424 loglevel, small integer. If not given, 7 is used.

.It log_flags
If given and set to 1, this indicates that the log message is in JSON format.

.It log_prefix
The log prefix. If not given, "rrr_post" will be used.

.It log_message
The actual log message. This value is mandatory.

.It log_file
.It log_line
The file name and line from where the log message originates, string and integer.
If either is not given, values from the
.B rrr_post
code will be used.

The
.B rrr_logd
daemon is also capable of recieving array messages with the fields above, but the native log messages are more efficient.

.El

If no array definition is specified, the following simple definition expecting
one message per line is used.

.B nsep#log_message,sep1

.IP -j|--json
If given, a flag indicating that the message data is in JSON format is set on any generated log messages.

.IP -m|--max-message-size[=]BYTES
Maximum size of a message when reading. This should be set to prevent messages with missing delimeters to fill up memory.
A value of 0 means unlimited message size.
Defaults to 4096.
.IP -c|--count[=]RECORDS
Stop reading file or standard input after this many records have been read.
.IP -t|--topic[=]MQTT-TOPIC
Set an MQTT topic in the messages generated.
.IP -S|--strip-separators
Strip out any parsed
.B sep
fields from arrays.
.IP -s|--sync
If array parsing fails (invalid input data), try to parse again after skipping one byte forward in the input.
.IP -q|--quiet
Don't print statistics upon exit.
.IP -d|--debuglevel[=]FLAGS
Debuglevel to use.
.IP -D|--debuglevel-on-exit[=]FLAGS
Debuglevel to use when program exits.
.IP -l|--loglevel-translation
Translate output loglevels to RFC5424 format. Internal loglevels will be translated so that error messages become ERROR
and other messages DEBUG (loglevels 3 and 7).
.IP -e|--environment-file
See
.Xr rrr(1)
for usage.
.PP
.SH SIGNALS
.IP SIGURS1
Print sent message statistics, then continue.
.IP SIGINT/CTRL+C
Complete processing of current message then exit. SIGINT a second time causes immediate exit.
.IP SIGTERM
Exit immediately.
.IP SIGPIPE
Ignored (an error message is printed).
.PP
.SH ARRAY DEFINITION
A range of data types may be used in the data records given to
.B rrr_post
. A record consists of one or more import items of different types.
Some types are of fixed length, and others require delimeters. An array definition describes the data to expect 
in each record.
.PP
Array definition may or may not contain conditional branches.
This allows different input values to be parsed based on previously parsed values.
Coditional branching is explained in the next chapter.
.PP
It is important to make sure that it is always possible to figure out the lenght of each received record from the data it contains.
For instance, a definition cannot end with a number given as ASCII string as it's not possible to determin when it ends.
Such data types are called
.B weak dynamic lenght types,
and these must be delimeted by a separator character which is guaranteed not to appear inside the data.
RRR does not smart checking or validation of definition, but parsing of input data will fail if value boundaries cannot be correctly identified.
.PP
If parsing fails, this might lead to for instance a TCP connection to be closed or queued up UDP data to be dropped.
Using
.B debuglevel 4
will expose how input data are parsed using the array definitions, this might assist in debugging such problems.
.PP
An array definition consists of one or more
.B positions
which each specifies a particular type of data to parse.
Sequential fixed length values of the same type may be grouped together in a single position, and each item may be tagged to
ease the extraction of data in later processing.
Non-dynamic types may have both a length or element count set.
Parsing four elements of one byte and parsing one element of four bytes only differ in how the data is represented after the array has been parsed.    
.SS SYNTAX
type1[length1][s|u|][@count1][#tag1][,type2[length2][s|u|][@count2][#tag2]][,...]
.PP
.Bl -tag -width -indent
.It type
Identifier name of the type

.It length
Length in bytes of the type (if required)

.It count
Item count of the specific type, defaults to 1 if not specified

.It tag
Optional custom identifier tag of the type (containing letters, numbers and/or underscores)
.El
.SS FIXED LENGTH TYPES
These types require the
.I length
field to be specified.
.PP
.Bl -tag -width -indent
.It be
Unsigned number in big endian binary format. Length must be in the range 1-8.

.It le
Unsigned number in little endian binary format. Length must be in the range 1-8.

.It h
Unsigned number in the endianess of the machine. Might be unsafe for network transfer. Length must be in the range 1-8.

.It blob
Arbitary binary data. Lengt must be in the range 1-1024.

.It sep
One or more separator characters. Matches ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~ NULL ETX EOH LF CR TAB.
Length must be in the range 1-64.

.It stx
One or more STX or SOH characters.
Length must be in the range 1-64.
.El
.PP
Types
.B be, le
and
.B h
may be followed by an
.B s
after the length specifier to indicate that the input number is signed. If instead
.B u
or nothing is set here, the value is treated as unsigned. No other types may have sign flag set.
.SS WEAK DYNAMIC LENGTH TYPES
The length of these types are identified automatically and must not have length set. They cannot be at the end of a definition.
.PP
.Bl -tag -width -indent
.It ustr
An unsigned integer encoded with ASCII characters 0-9. Stored with 64-bits. Number may begin with one or more white spaces.

.It istr
A signed integer encoded with ASCII characters 0-9 optionally preceeded by - or +. Stored with 64-bits. Number may begin with one or more white spaces.

.It fixp
The RRR fixed decimal type encoded with ASCII characters 0-9 (and A-F). May include a single dot . to separate integer from fraction,
and the integer part may be preceded with a sign (- or +). Stored with 64-bits where 1 bit is the sign, 39 bits is the integer and
24 bits are the fraction. May be preceeded with 10# or 16# to indicate use of base 10 or base 16 conversion, default is base 10. 
.El
.SS STRONG DYNAMIC LENGTH TYPES
The length of these types are identified automatically and must not have length set. They may be at the end of a definition.
.PP
.Bl -tag -width -indent
.It msg
A full RRR message complete with headers and checksums.

.It hdlc
An HDLC (High-Level Data Link Control) message delimeted by 0x7e at the beginning and end.
Any data before the start byte is ignored.
The final value does not contain the boundaries and has all escape sequences resolved.

.It str
An arbitary length string of characters beginning and ending with double quotes ". Double quotes inside the string must be escaped with \\. The
surrounding quotes are not included in the final string.

.It nsep
Match any numbers of bytes untill a separator character NULL, SOH, STX, ETX, EOH, LF, CR or TAB is found. The separator itself will not be included in the result, a
.B sep
should follow afterwards to take care of it.
.El
.SS SPECIAL TYPES
.Bl -tag -width -indent
.It err
This is a special value which triggers a parse error and aborts parsing when reached.
It can be used for instance in an ELSE block to trap invalid input data.
If specified outside of a conditional block, parsing will always fail.

.It vain
This type has no value and has zero length. It may still have a tag, in which case it can be used to indicate presence of someting.
A value can also be set to type
.B vain
to indicate that a value is abscent.

Then
.B vain
type will not, when parsed, cause the read position to increment, hence it's has no effect on interpretation of input data.
In other words, the vain value is merely added to the resluting array when encountered in a definition.
.El
.SS ARRAY CONDITIONAL BRANCHING
RRR array support branching, which means that different sets of values may be parsed depending on previously parsed values.
The array tree is only used when parsing, and when parsing is complete, a single linear array has been produced. 
.PP
A simple tree may look like this:
.PP  
.nf
be1#type,be1#one
IF ({type} == 1)
	;
ELSIF ({type} == 2)
	be2#two
	;
ELSIF ({type} > 0)
	blob{type}#x
	;
ELSE
	err
	;
sep1#separator
;
.fi
.PP
Here, a byte is first parsed and given the name 'type'.
Then, depending on it's value, either no more bytes are parsed, two bytes are parsed, or X number of bytes are parsed.
At the end, a separator byte is parsed.
.PP
The length of the blob field would be, had type not been equal to 1 or 2, the value of the first byte.
Note that blob lengths cannot be zero, in this case the parsing would fail if a first byte with the value 0 as the
parser will attempt to parse the 'err' type which triggers parse failure.
.PP
When a parsing fails, all parsed input data is deleted any possible open network connection on which we received the
erroneous data is closed.
.PP
In this example, should the first input byte have the value '2', the resulting array would look like this (tags only):
.B type,one,two,separator.
The same result would in this particular case, and if the same input had been used, have been produced as when using the definition
.B  be1#type,be1#one,be2#two,sep1#separator;
.PP
All array trees may be written on a single line.
In the one-line representation below of the earlier example, all spaces has been removed.
Note the extra comma before IF which is needed to avoid that the IF letters become part of the 'one' tag.
Also note that there is no comma after the ELSE keyword, this is valid syntax (a comma may however be added for readability).
Redundant commas in the array definitions are ignored. 
.PP
be1#type,be1#one,IF({type}==1);ELSIF({type}==2)be2#two;ELSIF({type}>0)blob{type}#x;ELSEerr;sep1#separator;
.PP
All standard operators available in programming langauges are available, but is it not possible to assign values.
The operator style is the same as for the C-language, and the same precedence rules are used.
Parentheses may be used as well as bitwise operators.
Constant decimal (positive or negative) or hexadecimal numbers (positive only) may be used.
.PP
In conditions, it is not possible to match strings or blobs directly.
Their lowest bytes (big endian is assumed) are put into a 64-bit unsigned integer which is used for comparisons.
This is useful for instance when comparing a single byte separator, it can be match directly against a decimal or hexadecimal number.
.PP
List of values to parse are separated with commas, like 'be1,be2,b3'.
Commas before or after IF blocks are optional, and multiple consecutive commas are ignored.
A block may be empty.
There must not be any commas between IF, ELSIF and ELSE, but each of these blocks must end with semicolon. 
The whole array tree itself always has at least one semicolon at the end.  
.PP
Value length and count specifiers may be replaced with tag names using the syntax '{tag}', the value from the tag will be used after being converterd to unsigned integer.
Tag names may not be dynamically set. All replacement values must have been parsed previously in the same data set.
.PP
There may be newlines, spaces etc. anywhere except from inside a single value definition ('be1#one' cannot be written as 'be1 #one').
At the same time, newlines and spaces are optional, they just help making the the array tree definition more readable.
Note that a tag name like '#my_tag_name' followed by an IF block obviously cannot be written without a space or comma in between.
If non-newline definitions are wanted, comma is recommended for these cases: '... #my_tag_name,IF ...'.
.PP
Note that it is possible to use both normal notation like "a == b + c" and reverse polish notiation (RPN) like "a b c + ==" in condition expressions.
The two forms will produce the same result.
.PP
After parsing a condition, parantheses are removed and the condition expression will be stored in RPN.
The condition will also appear in RPN without parantheses in any debug messages.
.PP
Note that the operators in any case will get sorted according to precedence,
which means that the input "1 2 3 + *" will end up as "1 2 3 * +" (the multiplication will be carried out first).
It is probably best to write an expression like this as "1 * (2 + 3)" to ensure the addition is performed first, if that's what you want.
.PP
Any condition expression which evaluates to non-zero is counted as true, and a zero result is counted as false.
.PP
The keyword REWIND followed by an unsigned integer may be used to "unparse" earlier positions in an array.
For instance "be1,REWIND1,be2" would first parse one byte, then delete it from the resulting array and start parsing from the beginning, but now parsing two bytes.
This function is useful in branched condition where for instance a byte needed to be parsed for use in a conditional check, and the same
byte should also be included in a larger result value parsed later.
.PP
Note that the number after REWIND indicates how many array positions we are to revery and NOT the number of bytes.
It is not possible to replace the number of rewind position with a tag, only decimal fixed values are allowed.
If one attempts to rewind past the beginning of the array, the validation of the array tree will fail before the program starts.
.PP
In the following example, if the first parsed byte is an STX, it will not be included in the final value tagged "code".
However if the first byte is not an STX, we rewind one position and include all bytes up to the end separator in the final result.
The value with tag "indicator" will thus only be present in the result if the first byte is an STX.
.PP
.nf
be1#indicator
IF ({indicator} != 0x02)
	REWIND1
	;
nsep#code,sep1
;
.fi
.SH RETURN VALUE
.B rrr_post
returns 0 on success and 1 on failure.

.SH DEBUG FLAGS
Refer to
.Xr rrr(1)
for possible debug flags.

.SH SEE ALSO
.Xr rrr(1),
.Xr rrr.conf(5),
.Xr rrr_logd(1)
